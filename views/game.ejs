<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU" crossorigin="anonymous">
  <link rel="stylesheet" type="text/css" href="/css/stylesheet.css" />
  <title></title>
</head>

<body>
  <div id="container">
    <div id="banner">
      <h1 class="header">Think fast, type faster!</h1>
    </div>
    <div id="infoContainer">
      <p v-if="gameStoped && startCounter == false">Hi <%=testObject%>! Your highest score: {{highestScore}}</p>
      <p v-if="gameStoped && startCounter == false">Scoreboard:</p>
      <ol id="array-rendering" v-if="gameStoped && startCounter == false">
        <li v-for="item in scoreBoard">
          {{item.name}} ||   {{item.score}}wpm
        </li>
      </ol>
      <p v-if="gameStoped && startCounter == false">In order to start the game click button bellow.</p>
      <button v-on:click="startGame()" v-if="gameStoped && startCounter==false">Start game</button>
      <button v-on:click="logout()" v-if="gameStoped && startCounter==false">Logout</button>
      <p v-if="startCounter">Get ready. Game is about to start! {{ counter }}</p>
      <p v-if="startCounter || gameStoped == false">Type given text as fast as you can. Good luck!</p>
      <p v-if="gameStoped==false">Time: {{ gameCounter }}s WPM: {{ wpm }}</p>
      <div id="original"><p v-if="gameStoped==false">"{{ text[textIndex] }}"</p></div>
      <textarea v-if="gameStoped==false" placeholder="Type here" id="inputField"></textarea>
      <div class="progress" style="height: 50px;" v-if="gameStoped==false">
      <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%,"></div>
      </div>
    </div>
    <div id="footer">
      <h1 class="footer">&copy; Copyright 2021</h1>
    </div>
  </div>
  <script>
    // declare first Vue appp
    var app = new Vue({
      el: "#container",
      data: {
        text: JSON,
        textIndex: 1,
        scoreBoard: JSON,
        gameStoped: true,
        counter: 5,
        startCounter: false,
        gameCounter: 0,
        wpm: 0,
        highestScore: 0,
        selectedImage: null,
      },
      methods: {
        onFileChanged(event) {
          this.selectedImage = event.target.files[0]
        },
        async Upload() {
          console.log("test")
          await fetch('/profile/avatar', {
            method: "POST",
            body: {
              avatar: this.selectedImage
            } 
          })

        
        },
        async getText() {
          await fetch("/text", {
            method: "GET",
            mode: "cors",
          })
            .then((res) => (data = res.json()))
            .then((data) => (this.text = data.text))
            .catch((err) => console.log(err.message));
          app.textIndex = Math.floor(Math.random() * app.text.length)
        },
        postScore(score) {
          fetch("/score/save", {
            method: "POST",
            mode: "cors",
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              "name": "<%=testObject%>",
              "score": score
            })
          })
        },
        async getHighestScore() {
          await fetch("/score/highest", {
            method: "POST",
            mode: "cors",
            headers: {
              'Content-type': 'application/json'
            },
            body: JSON.stringify({
              "name": "<%=testObject%>"
            })
          })
            .then((res) => (data = res.json()))
            .then((data) => (this.highestScore = data))
            .catch((err) => console.log(err.message));
        },
        async getScoreBoard() {
          await fetch("/score/board", {
            method: "GET",
            mode: "cors",
            headers: {
              'Content-type': 'application/json'
            }
          })
            .then((res) => (data = res.json()))
            .then((data) => (this.scoreBoard = data))
            .catch((err) => console.log(err.message));
        },
        intervalCounter() {
          let n = 0;
          let interval = setInterval(function () {
            if (n == 4) {
              clearInterval(interval);
              app.getText();
              app.gameStoped = false;
              app.startCounter = false;
              app.gameCounterFunction();
              app.validateInput();
            }
            n++;
            app.counter = app.counter - 1;
          }, 1000);
        },
        startGame() {
          app.startCounter = true;
          app.intervalCounter();
        },
        validateInput(text) {
          let i = 0;
          let indexSaved = 0
          let interval = setInterval(function () {
            i++;
            let inputField = document.getElementById("inputField").value;
            let index = inputField.length;
            let originalText = app.text[app.textIndex].slice(0, index);
            let originalLength = app.text[app.textIndex].length;
            if (index < originalLength) {
              if (inputField == originalText) {
                app.wpm = Math.round(indexSaved / 5 / (app.gameCounter / 60));
                document.getElementById("inputField").style = "color: green";
                // console.log(app.text[app.textIndex].toString().slice(index))
                if(app.text[app.textIndex].toString()[index-1]==" "){
                  indexSaved = indexSaved + index
                  app.text[app.textIndex] = app.text[app.textIndex].toString().slice(index)
                  document.getElementById("inputField").value = ""
                }  
                
                var progress = Math.round(index/originalLength*100)
                // $(".progress-bar").css("width", progress + "%").text(progress + " %");
              } else {
                document.getElementById("inputField").style = "color: red";
                
              }
            } else {
              let score = (indexSaved / 5) / (app.gameCounter / 60)
              clearInterval(interval);
              alert(
                "Well done! Your time: " +
                app.gameCounter +
                "seconds. Your score: " +
                Math.round(score) +
                "WPM"
              );
              app.postScore(Math.round(score))
              setTimeout(() => { app.getHighestScore() }, 100);
              setTimeout(() => { app.getScoreBoard() }, 100);
              app.gameStoped = true;
              app.counter = 5;
            }
          }, 50);
        },
        gameCounterFunction() {
          app.gameCounter = 0;
          let interval = setInterval(function () {
            if (app.gameStoped) {
              clearInterval(interval);
            } else {
              app.gameCounter = app.gameCounter + 1;
            }
          }, 1000);
        },
        logout() {
          window.open('/', "_self")
        },
      },
    });
    app.getHighestScore()
    app.getScoreBoard()
  </script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ" crossorigin="anonymous"></script>
</body>

</html>