<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" type="text/css" href="/css/stylesheetGame.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <title></title>
  </head>

  <body>
    <div id="container">
      <div id="banner">
        <h1 class="header">Think fast, type faster!</h1>
      </div>
      <div id="infoContainer">
        <div id="navBar">
          <img
            class="imgMenu"
            src="/img/game.png"
            @click="display.game=true; display.scoreboard=false; display.profile=false"
          />
          <img
            class="imgMenu"
            src="/img/scoreboard.png"
            @click="display.scoreboard=true; display.game=false; display.profile = false"
          />
          <img
            class="imgMenu"
            src="/img/profile.png"
            @click="display.profile=true; display.game=false; display.scoreboard=false"
          />
        </div>

        <div id="main">
          <p
            v-if="display.game==false && display.scoreboard==false && display.profile==false"
          >
            Hi <%=testObject%>! Your highest score: {{ highestScore }}
          </p>

          <!-- <img v-bind:src="'/media/avatars/' + joke.avatar" />  -->
          <div
            v-if="display.scoreboard"
            style="font-weight: normal; font-size: 30px; text-align: justify"
          >
            <!-- <p v-if="display.scoreboard">Scoreboard:</p> -->
            <table
              id="array-rendering"
              v-if="display.scoreboard"
              style="width: 80%"
            >
              <tr v-for="(item,index) in scoreBoard" :key="index">
                <td>{{ index + 1 }}</td>
                <td>
                  <img
                    class="imgScoreBoard"
                    v-bind:src="'../img/avatar' + scoreBoardAvatars[index] + '.png'"
                  />
                </td>
                <td>{{ item.name }}</td>
                <td>{{ item.score }}wpm</td>
              </tr>
            </table>
          </div>

          <div v-if="display.game" style="padding-top: 30px">
            <p v-if="gameStoped && startCounter == false">
              In order to start the game click button bellow.
            </p>
            <button
              v-on:click="startGame()"
              v-if="gameStoped && startCounter==false"
            >
              Start game
            </button>
            <p v-if="startCounter">
              Get ready. Game is about to start! {{ counter }}
            </p>
            <p v-if="startCounter || gameStoped == false">
              Type given text as fast as you can. Good luck!
            </p>
            <p
              v-if="gameStoped==false"
              class="f1"
              style="font-size: 30px; font-weight: lighter"
            >
              Time: {{ gameCounter }}s WPM: {{ wpm }}
            </p>
            <div id="original">
              <p v-if="gameStoped==false" style="text-align: justify">
                "{{ text[textIndex] }}"
              </p>
            </div>
            <textarea
              v-if="gameStoped==false"
              placeholder="Type here"
              id="inputField"
            ></textarea>
            <div class="progress" style="height: 50px" v-if="gameStoped==false">
              <div
                class="progress-bar progress-bar-striped progress-bar-animated"
                role="progressbar"
                aria-valuenow="0"
                aria-valuemin="0"
                aria-valuemax="100"
                style="width: 0%"
              ></div>
            </div>
          </div>

          <div v-if="display.profile">
            <div id="profileCard">
              <img
                class="imgProfile"
                v-bind:src="'../img/avatar' + avatar_id + '.png'"
                v-on:click="popOver"
                data-toggle="popover"
                title="Change Avatar"
              />
              <!-- <button type="button" v-on:click="changeAvatar()" class="btn btn-info">Toggle popover</button> -->
              <div id="profileCardBody">
                <p><%=testObject%></p>
                <p>Highest Score: {{ highestScore }}</p>
              </div>
            </div>
          </div>

          <table id="popover-content" style="display: none">
            <tr v-for="(item,index) in avatarLink" :key="index">
              <td>
                <img
                  class="imgScoreBoard"
                  :id="'button' + index"
                  :src="avatarLink[index]"
                />
              </td>
            </tr>
          </table>

          <button
            v-on:click="logout()"
            v-if="gameStoped && startCounter==false"
          >
            Logout
          </button>
        </div>
      </div>
      <div id="footer">
        <h1 class="footer">&copy; Copyright 2021</h1>
      </div>
    </div>
    <script>
      // declare first Vue appp
      var app = new Vue({
        el: "#container",
        data: {
          display: {
            scoreboard: false,
            game: false,
            profile: false,
          },
          avatarLink: [
            "../img/avatar1.png",
            "../img/avatar2.png",
            "../img/avatar3.png",
            "../img/avatar4.png",
            "../img/avatar5.png",
            "../img/avatar6.png",
            "../img/avatar7.png",
            "../img/avatar8.png",
          ],
          text: JSON,
          textIndex: 1,
          textLength: 0,
          avatar_id: 0,
          scoreBoard: JSON,
          scoreBoardAvatars: [0, 0, 0, 0, 0],
          help: 0,
          gameStoped: true,
          counter: 5,
          startCounter: false,
          gameCounter: 0,
          wpm: 0,
          highestScore: 0,
          selectedImage: null,
        },
        methods: {
          onFileChanged(event) {
            this.selectedImage = event.target.files[0];
          },
          async getAvatar() {
            await fetch("/profile/avatar", {
              method: "POST",
              mode: "cors",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                name: "<%=testObject%>",
              }),
            })
              .then((res) => (data = res.json()))
              .then((data) => (this.avatar_id = data))
              .catch((err) => console.log(err.message));
          },
          async getScoreBoardAvatars(name) {
            var data = 0;
            await fetch("/profile/avatar", {
              method: "POST",
              mode: "cors",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                name: name,
              }),
            })
              .then((res) => (data = res.json()))
              .then((data) => (this.help = data))
              .catch((err) => console.log(err.message));
          },
          async changeAvatar(id) {
            await fetch("/profile/update", {
              method: "POST",
              mode: "cors",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                name: "<%=testObject%>",
                avatar_id: id,
              }),
            });
            app.getAvatar();
            app.getScoreBoard();
          },
          popOver() {
            $('[data-toggle="popover"],[data-original-title]').popover({
              html: true,
              content: function () {
                return $("#popover-content").html();
              },
            });
            $('[data-toggle="popover"]').popover("toggle");

            $("html").on("mouseup", function (e) {
              var l = $(e.target);
              if (l[0].className.indexOf("popover") == -1) {
                $(".popover").each(function () {
                  $(this).popover("hide");
                });
              }
            });

            $(document).on("click", "#button0", function () {
              app.changeAvatar(1);
            });
            $(document).on("click", "#button1", function () {
              app.changeAvatar(2);
            });
            $(document).on("click", "#button2", function () {
              app.changeAvatar(3);
            });
            $(document).on("click", "#button3", function () {
              app.changeAvatar(4);
            });
            $(document).on("click", "#button4", function () {
              app.changeAvatar(5);
            });
            $(document).on("click", "#button5", function () {
              app.changeAvatar(6);
            });
            $(document).on("click", "#button6", function () {
              app.changeAvatar(7);
            });
            $(document).on("click", "#button7", function () {
              app.changeAvatar(8);
            });
          },
          async Upload() {
            console.log("test");
            await fetch("/profile/avatar", {
              method: "POST",
              body: {
                avatar: this.selectedImage,
              },
            });
          },
          async getText() {
            await fetch("/text", {
              method: "GET",
              mode: "cors",
            })
              .then((res) => (data = res.json()))
              .then((data) => (this.text = data.text))
              .catch((err) => console.log(err.message));
            app.textIndex = Math.floor(Math.random() * app.text.length);
            app.textLength = app.text[app.textIndex].length;
          },
          postScore(score) {
            fetch("/score/save", {
              method: "POST",
              mode: "cors",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                name: "<%=testObject%>",
                score: score,
              }),
            });
          },
          async getHighestScore() {
            await fetch("/score/highest", {
              method: "POST",
              mode: "cors",
              headers: {
                "Content-type": "application/json",
              },
              body: JSON.stringify({
                name: "<%=testObject%>",
              }),
            })
              .then((res) => (data = res.json()))
              .then((data) => (this.highestScore = data))
              .catch((err) => console.log(err.message));
            console.log(app.highestScore);
          },
          async getScoreBoard() {
            await fetch("/score/board", {
              method: "GET",
              mode: "cors",
              headers: {
                "Content-type": "application/json",
              },
            })
              .then((res) => (data = res.json()))
              .then((data) => (this.scoreBoard = data))
              .catch((err) => console.log(err.message));
            for (var i = 0; i < 5; i++) {
              try {
                let name = app.scoreBoard[i].name;
                await app.getScoreBoardAvatars(name);
                app.scoreBoardAvatars[i] = app.help;
              } catch (error) {
                break;
              }
            }
          },
          intervalCounter() {
            let n = 0;
            let interval = setInterval(function () {
              if (n == 4) {
                clearInterval(interval);
                app.getText();
                app.gameStoped = false;
                app.startCounter = false;
                app.gameCounterFunction();
                app.validateInput();
              }
              n++;
              app.counter = app.counter - 1;
            }, 1000);
          },
          startGame() {
            app.startCounter = true;
            app.intervalCounter();
          },
          validateInput() {
            let i = 0;
            let indexSaved = 0;
            let interval = setInterval(function () {
              let inputField = document.getElementById("inputField").value;
              let index = inputField.length;
              let currentText = app.text[app.textIndex].slice(0, index);
              let currentLength = app.text[app.textIndex].length;
              if (index < currentLength) {
                if (inputField == currentText) {
                  app.wpm = Math.round(indexSaved / 5 / (app.gameCounter / 60));
                  document.getElementById("inputField").style = "color: green";
                  if (app.text[app.textIndex].toString()[index - 1] == " ") {
                    indexSaved = indexSaved + index;
                    app.text[app.textIndex] = app.text[app.textIndex]
                      .toString()
                      .slice(index);
                    document.getElementById("inputField").value = "";
                    var progress = Math.round(
                      (indexSaved / app.textLength) * 100
                    );
                    $(".progress-bar")
                      .css("width", progress + "%")
                      .text(progress + " %");
                  }
                } else {
                  document.getElementById("inputField").style = "color: red";
                }
              } else {
                let score = indexSaved / 5 / (app.gameCounter / 60);
                clearInterval(interval);
                alert(
                  "Well done! Your time: " +
                    app.gameCounter +
                    "seconds. Your score: " +
                    Math.round(score) +
                    "WPM"
                );
                app.postScore(Math.round(score));
                setTimeout(() => {
                  app.getHighestScore();
                }, 100);
                setTimeout(() => {
                  app.getScoreBoard();
                }, 100);
                app.gameStoped = true;
                app.counter = 5;
              }
            }, 50);
          },
          gameCounterFunction() {
            app.gameCounter = 0;
            let interval = setInterval(function () {
              if (app.gameStoped) {
                clearInterval(interval);
              } else {
                app.gameCounter = app.gameCounter + 1;
              }
            }, 1000);
          },
          logout() {
            window.open("/", "_self");
          },
        },
      });
      app.getHighestScore();
      app.getScoreBoard();
      app.getAvatar();
    </script>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-/bQdsTh/da6pkI1MST/rWKFNjaCP5gBSY4sEBT38Q/9RBh9AH40zEOg7Hlq2THRZ"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
